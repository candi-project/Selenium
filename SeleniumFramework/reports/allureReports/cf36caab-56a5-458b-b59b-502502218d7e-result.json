{"name": "test_create_config_large_file", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <SeleniumFramework.pages.PGI_687_Barcode_Configuration.BarcodeConfigurations object at 0x7fee2a007450>\nlocatorValue = \"//mat-step-header[@id='cdk-step-label-2-4']\", locatorType = 'xpath'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 50, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n>           webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n\n../base/BasePage.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cfb2dafd3afe9e4bf876971c3550ef05\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7fee2a0069d0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/usr/local/lib/python3.7/dist-packages/selenium/webdriver/support/wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFramework.pages.PGI_687_Barcode_Configuration.BarcodeConfigurations object at 0x7fee2a007450>\nlocatorValue = \"//mat-step-header[@id='cdk-step-label-2-4']\", locatorType = 'xpath'\n\n    def clickOnElement(self, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n>           webElement = self.waitForElement(locatorValue, locatorType)\n\n../base/BasePage.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SeleniumFramework.pages.PGI_687_Barcode_Configuration.BarcodeConfigurations object at 0x7fee2a007450>\nlocatorValue = \"//mat-step-header[@id='cdk-step-label-2-4']\", locatorType = 'xpath'\n\n    def waitForElement(self, locatorValue, locatorType=\"id\"):\n        webElement = None\n        try:\n            locatorType = locatorType.lower()\n            locatorByType = self.getLocatorType(locatorType)\n            wait = WebDriverWait(self.driver, 50, poll_frequency=1,\n                                 ignored_exceptions=[ElementNotVisibleException, NoSuchElementException])\n            webElement = wait.until(ec.presence_of_element_located((locatorByType, locatorValue)))\n            self.log.info(\n                \"Web element found with locator value: \" + locatorValue + \" using locator Type: \" + locatorType)\n        except:\n            self.log.error(\n                \"Web element not found with locator value: \" + locatorValue + \" using locator Type: \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n../base/BasePage.py:98: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <SeleniumFramework.tests.test_PGI_687_barcode_configuration_Gateway.barcode_configurations_error testMethod=test_create_config_large_file>\n\n    def test_create_config_large_file(self):\n        self.bc.clickOnConfiguration()\n        self.bc.scrollToCreate()\n        self.bc.clickOnNext_Android()\n>       self.bc.add_Workflow_Rules_Large_File()\n\ntest_PGI_687_barcode_configuration_Gateway.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/PGI_687_Barcode_Configuration.py:147: in add_Workflow_Rules_Large_File\n    self.clickOnElement(self._add_Workflow_Rules, \"xpath\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <SeleniumFramework.pages.PGI_687_Barcode_Configuration.BarcodeConfigurations object at 0x7fee2a007450>\nlocatorValue = \"//mat-step-header[@id='cdk-step-label-2-4']\", locatorType = 'xpath'\n\n    def clickOnElement(self, locatorValue, locatorType=\"id\"):\n        try:\n            locatorType = locatorType.lower()\n            webElement = self.waitForElement(locatorValue, locatorType)\n            webElement.click()\n            self.log.info(\n                \"Clicked on WebElement with locator value \" + locatorValue + \" using locator Type: \" + locatorType)\n        except:\n            self.log.error(\n                \"Unable to click on WebElement with locator value \" + locatorValue + \" using locator Type: \" + locatorType)\n            print_stack()\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n../base/BasePage.py:113: AssertionError"}, "attachments": [{"name": "xpath", "source": "c557eb23-b10e-47e3-9aaf-f0cf94c3d149-attachment.png", "type": "image/png"}, {"name": "xpath", "source": "d3a5f4d8-5a7e-414c-b54c-049f7b70dc44-attachment.png", "type": "image/png"}, {"name": "log", "source": "e3b43f16-f974-4d9a-ae2f-04437f0eea36-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "45ea2aa8-9abf-491c-8170-02c85850c3eb-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "5b0ed77c-f307-4183-a296-26afc396b8a2-attachment.txt", "type": "text/plain"}], "start": 1607614389496, "stop": 1607614466094, "uuid": "413a9bec-6df1-462e-8652-a3f3a8fdc5c7", "historyId": "e093da3b89978b8410b213d35b509951", "testCaseId": "d63088eb542079ab239acf73629fea6a", "fullName": "test_PGI_687_barcode_configuration_Gateway.barcode_configurations_error#test_create_config_large_file", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'setUp')"}, {"name": "suite", "value": "test_PGI_687_barcode_configuration_Gateway"}, {"name": "subSuite", "value": "barcode_configurations_error"}, {"name": "host", "value": "candi-ThinkPad-E480"}, {"name": "thread", "value": "25453-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_PGI_687_barcode_configuration_Gateway"}]}